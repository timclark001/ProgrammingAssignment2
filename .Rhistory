demo()
install.packages("KernSmooth")
install.packages(swirl)
install.packages("swirl")
library("swirl")
swirl()
5 + 7
x <- 5 + 7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9.3.14)
z<-c(1.1,9,3.14)
z
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div <- x/my_sqrt
my_div <- z/my_sqrt
my_div
c(1:4) + c(0,10)
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(1,10,100)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_sqrt
my_div
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files)
seealso(list.files())
SeeAlso(list.files())
old.dir<-getwd()
dir.create("testdir"")
dir.create("testdir")
setwd(testdir)
setwd("testdir")
getwd()
file.create("mytest.R")
ls()
info()
list.files()
file.exists(mytest.R)
file.exists("mytest.R")
file.info(mytest.R)
file.info("mytest.R")
file.rename("mytest.R","mytest2.R"")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2")
dir.create(filepath("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3")recursive=T)
dir.create(file.path("testdir2","testdir3"),recursive=T)
file.remove(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive=T)
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
se1(0,10,by=0.5)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0, 1, 2), each = 10)
quit
exit()
log(-1)
?traceback
log(-1)
traceback()
load swirl
?swirl
install.pakages(swirl)
install.packages(swirl)
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
data(iris)
?iris
class(iris)
iris
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
$apply
?apply
apply(iris,1,mean)
colMeans(iris)
apply(iris,2, mean)
rowMeans(iris[,1:4])
iris[,1:4]
rowMeans(iris[,1:4])
apply(iris[,1:4],2,mean)
library(datasets)
load(mtcars)
load("mtcars")
library(datasets)
load(mtcars)
library(datasets)
load("mtcars")
?mtcars
tapply(mtcars$mpg, mtcars$cyl,mean)
tapply(mtcars$hp, mtcars$cyl,mean)
debug(ls)
ls()
exit
q
clear
makeVector <- function(x = numeric()) {}
makeVector(1)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set=set, get=get, setmean=setmean, getmean=getmean)
}
v1 <- makeVector(1)
v1
class(v1)
setwd("Coursera/ProgrammaingAssignment2")
setwd("Coursera/ProgrammingAssignment2")
getwd()
ls
